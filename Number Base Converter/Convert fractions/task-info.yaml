type: edu
files:
- name: src/converter/Main.java
  visible: true
  text: |
    package converter;

    public class Main {

        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/NumeralSystemConverterTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.math.BigDecimal;
    import java.math.BigInteger;
    import java.math.RoundingMode;
    import java.util.Arrays;
    import java.util.List;
    import java.util.Random;

    public class NumeralSystemConverterTest extends StageTest<String> {

        @Override
        public List<TestCase<String>> generate () {

            return Arrays.asList(
                    new TestCase<String>().setDynamicTesting(this::test1),
                    new TestCase<String>().setDynamicTesting(this::test2),
                    new TestCase<String>().setDynamicTesting(this::test3),
                    new TestCase<String>().setTimeLimit(60000).setDynamicTesting(this::test4),
                    new TestCase<String>().setTimeLimit(60000).setDynamicTesting(this::test5),
                    new TestCase<String>().setTimeLimit(60000).setDynamicTesting(this::test6),
                    new TestCase<String>().setTimeLimit(60000).setDynamicTesting(this::test7),
                    new TestCase<String>().setTimeLimit(60000).setDynamicTesting(this::test8),
                    new TestCase<String>().setTimeLimit(60000).setDynamicTesting(this::test9)
            );
        }

        String getConversionResult(String[] lines) {
            for (String line : lines) {
                if (line.contains(":")) {
                    return line.substring(line.indexOf(":") + 1).trim();
                }
            }

            throw new WrongAnswer(
                "Cannot find a \"Conversion result:\" part in the output.");
        }

        //test exit command
        CheckResult test1 () {

            TestedProgram main = new TestedProgram();
            String output = main.start().toLowerCase();

            if (!output.contains("source base") || !output.contains("target base") || !output
                    .contains("/exit")) {
                return CheckResult
                        .wrong("Your program should output the message \"Enter two numbers in format:" +
                                       " {source base} {target base} (To quit type /exit)\" when it starts");
            }

            main.execute("/exit");
            if (!main.isFinished()) {
                return CheckResult.wrong("Your program should terminate when the user enters " +
                                                 "\"/exit\"");
            }

            return CheckResult.correct();
        }

        //test output format
        CheckResult test2 () {

            TestedProgram main = new TestedProgram();
            String output;
            String randomDecimal;
            String actualResult;
            String userResult;
            String lastLine;
            String[] lines;

            main.start();
            output = main.execute("10 2").toLowerCase();
            if (!output.contains("base 10") || !output.contains("convert to base 2")) {
                return CheckResult.wrong("Your program should prompt the user for the number to be " +
                                                 "converted with the message \"Enter number in base " +
                                                 "{user source base} to convert to base {user target base}" +
                                                 " (To go back type /back)\" after accepting the " +
                                                 "source and target base");
            }

            if (!output.contains("/back")) {
                return CheckResult.wrong("Your program should provide the user with an option to go " +
                                                 "back to the top-level menu with the message \"Enter number in base " +
                                                 "{user source base} to convert to base {user target base} " +
                                                 "(To go back type /back)\"");
            }

            randomDecimal = Generator.getRandomSourceNumber(10, false);
            actualResult = Converter.decimalToBaseX(randomDecimal, 2);

            output = main.execute(randomDecimal).toLowerCase();
            lines = output.trim().split("\n");
            lastLine = lines[lines.length - 1];

            if (!lines[0].contains("result:")) {
                return CheckResult.wrong("Your program should print the conversion result in the " +
                                                 "format \"Conversion result: CONVERTED_NUMBER\"");
            }

            userResult = getConversionResult(lines);

            if (!userResult.equals(actualResult)) {
                return CheckResult.wrong("The conversion result of your program is wrong");
            }

            if (main.isFinished()) {
                return CheckResult.wrong("Your program should not terminate until the user enter " +
                                                 "\"/exit\" in the top-level menu");
            }

            if (lastLine.contains("/exit")) {
                return CheckResult.wrong("Your program should remember the user's source and target " +
                                                 "base and should not return to the top-level menu " +
                                                 "until the user enters \"/back\"");
            }

            if (!lastLine.contains("base 10") || !lastLine.contains("convert to base 2")) {
                return CheckResult.wrong("After each conversion, your program should prompt the user" +
                                                 " for a number to be " +
                                                 "converted with the message \"Enter number in base " +
                                                 "{user source base} to convert to base {user target base}" +
                                                 " (To go back type /back)\" until the user enters " +
                                                 "\"/back\"");
            }


            return CheckResult.correct();
        }

        //test back command
        CheckResult test3 () {

            TestedProgram main = new TestedProgram();
            String output;
            String lastLine;
            String[] lines;


            main.start();
            main.execute("10 2");
            main.execute(Generator.getRandomSourceNumber(10, false));

            output = main.execute("/back").toLowerCase();
            if (!output.contains("/exit")) {
                return CheckResult.wrong("Your program should take the user back to the top-level " +
                                                 "menu when they enter \"/back\"");
            }

            main.execute("10 8");
            output = main.execute(Generator.getRandomSourceNumber(10, false)).toLowerCase();

            lines = output.trim().split("\n");
            lastLine = lines[lines.length - 1];
            if (!lastLine.contains("base 10") || !lastLine.contains("convert to base 8")) {
                return CheckResult.wrong("After each conversion, your program should prompt the user" +
                                                 " for a number to be " +
                                                 "converted with the message \"Enter number in base " +
                                                 "{user source base} to convert to base {user target base}" +
                                                 " (To go back type /back)\" until the user enters " +
                                                 "\"/back\"");
            }

            main.execute("/back");
            main.execute("/exit");
            if (!main.isFinished()) {
                return CheckResult.wrong("Your program should terminate when the user enters " +
                                                 "\"/exit\"");
            }

            return CheckResult.correct();
        }

        //using BigInteger
        CheckResult test4 () {

            TestedProgram main = new TestedProgram();
            String output;
            String lastLine;
            String userResult;
            String actualResult;
            String randomBigInteger;
            String[] lines;

            main.start();

            for (int sourceBase = 2; sourceBase <= 18; sourceBase += 3) {

                for (int targetBase = 2; targetBase <= 36; targetBase += 3) {

                    output = main.execute(sourceBase + " " + targetBase).toLowerCase();
                    if (!output.contains("base " + sourceBase) || !output
                            .contains("convert to base " + targetBase)) {
                        return CheckResult
                                .wrong("Your program should prompt the user for the number to be " +
                                               "converted with the message \"Enter number in base " +
                                               "{user source base} to convert to base {user target base}" +
                                               " (To go back type /back)\" after accepting the " +
                                               "source and target base");
                    }

                    if (!output.contains("/back")) {
                        return CheckResult
                                .wrong("Your program should provide the user with an option to go " +
                                               "back to the top-level menu with the message \"Enter number in base " +
                                               "{user source base} to convert to base {user target base} " +
                                               "(To go back type /back)\"");
                    }

                    randomBigInteger = Generator.getRandomBigInteger(sourceBase, false);
                    actualResult = Converter
                            .convertSourceToTargetBase(randomBigInteger, sourceBase, targetBase
                                    , false);

                    output = main.execute(randomBigInteger).toLowerCase();

                    lines = output.trim().split("\n");
                    lastLine = lines[lines.length - 1];

                    userResult = getConversionResult(lines);

                    if (!userResult.equalsIgnoreCase(actualResult)) {
                        return CheckResult.wrong("The conversion result of your program is wrong");
                    }

                    if (main.isFinished()) {
                        return CheckResult
                                .wrong("Your program should not terminate until the user enter " +
                                               "\"/exit\" in the top-level menu");
                    }

                    if (lastLine.contains("/exit")) {
                        return CheckResult
                                .wrong("Your program should remember the user's source and target " +
                                               "base and should not return to the top-level menu " +
                                               "until the user enters \"/back\"");
                    }

                    main.execute("/back");
                }

            }

            main.execute("/exit");
            if (!main.isFinished()) {
                return CheckResult.wrong("Your program should terminate when the user enters " +
                                                 "\"/exit\"");
            }

            return CheckResult.correct();
        }

        CheckResult test5 () {

            TestedProgram main = new TestedProgram();
            String output;
            String lastLine;
            String userResult;
            String actualResult;
            String randomBigInteger;
            String[] lines;

            main.start();

            for (int sourceBase = 19; sourceBase <= 36; sourceBase += 3) {

                for (int targetBase = 2; targetBase <= 36; targetBase += 3) {

                    if (sourceBase == targetBase) {
                        continue;
                    }

                    output = main.execute(sourceBase + " " + targetBase).toLowerCase();
                    if (!output.contains("base " + sourceBase) || !output
                            .contains("convert to base " + targetBase)) {
                        return CheckResult
                                .wrong("Your program should prompt the user for the number to be " +
                                               "converted with the message \"Enter number in base " +
                                               "{user source base} to convert to base {user target base}" +
                                               " (To go back type /back)\" after accepting the " +
                                               "source and target base");
                    }

                    if (!output.contains("/back")) {
                        return CheckResult
                                .wrong("Your program should provide the user with an option to go " +
                                               "back to the top-level menu with the message \"Enter number in base " +
                                               "{user source base} to convert to base {user target base} " +
                                               "(To go back type /back)\"");
                    }

                    randomBigInteger = Generator.getRandomBigInteger(sourceBase, false);
                    actualResult = Converter
                            .convertSourceToTargetBase(randomBigInteger, sourceBase, targetBase
                                    , false);

                    output = main.execute(randomBigInteger).toLowerCase();

                    lines = output.trim().split("\n");
                    lastLine = lines[lines.length - 1];

                    userResult = getConversionResult(lines);

                    if (!userResult.equalsIgnoreCase(actualResult)) {
                        return CheckResult.wrong("The conversion result of your program is wrong");
                    }

                    if (main.isFinished()) {
                        return CheckResult
                                .wrong("Your program should not terminate until the user enter " +
                                               "\"/exit\" in the top-level menu");
                    }

                    if (lastLine.contains("/exit")) {
                        return CheckResult
                                .wrong("Your program should remember the user's source and target " +
                                               "base and should not return to the top-level menu " +
                                               "until the user enters \"/back\"");
                    }

                    main.execute("/back");
                }

            }

            main.execute("/exit");
            if (!main.isFinished()) {
                return CheckResult.wrong("Your program should terminate when the user enters " +
                                                 "\"/exit\"");
            }

            return CheckResult.correct();
        }

        //test fraction conversion
        CheckResult test6 () {

            TestedProgram main = new TestedProgram();
            int fractionalPartLength;
            String output;
            String lastLine;
            String userResult;
            String actualResult;
            String randomFraction;
            String[] lines;

            main.start();

            for (int sourceBase = 2; sourceBase <= 18; sourceBase += 3) {

                for (int targetBase = 2; targetBase <= 36; targetBase += 3) {

                    if (sourceBase == targetBase) {
                        continue;
                    }

                    output = main.execute(sourceBase + " " + targetBase).toLowerCase();
                    if (!output.contains("base " + sourceBase) || !output
                            .contains("convert to base " + targetBase)) {
                        return CheckResult
                                .wrong("Your program should prompt the user for the number to be " +
                                               "converted with the message \"Enter number in base " +
                                               "{user source base} to convert to base {user target base}" +
                                               " (To go back type /back)\" after accepting the " +
                                               "source and target base");
                    }

                    if (!output.contains("/back")) {
                        return CheckResult
                                .wrong("Your program should provide the user with an option to go " +
                                               "back to the top-level menu with the message \"Enter number in base " +
                                               "{user source base} to convert to base {user target base} " +
                                               "(To go back type /back)\"");
                    }

                    randomFraction = Generator.getRandomSourceNumber(sourceBase, true);
                    actualResult = Converter.convertSourceToTargetBase(randomFraction,
                                                                       sourceBase,
                                                                       targetBase, true);

                    output = main.execute(randomFraction).toLowerCase();

                    lines = output.trim().split("\n");
                    lastLine = lines[lines.length - 1];

                    userResult = getConversionResult(lines);

                    if (!userResult.contains(".")) {
                        return CheckResult.wrong("The conversion result your program outputs does not" +
                                                         " contain the fractional part");
                    }

                    if (userResult.split("\\.").length < 2) {
                        return CheckResult.wrong("A fractional number expected in the output!");
                    }

                    fractionalPartLength = userResult.split("\\.")[1].length();
                    if (fractionalPartLength != 5) {
                        return CheckResult.wrong("The fractional part of your conversion should only " +
                                                         "be 5 digits in length");
                    }

                    if (!actualResult.contains(userResult.substring(0, userResult.indexOf(".") + 2))) {
                        return CheckResult.wrong("The conversion result of your program is wrong");
                    }

                    if (main.isFinished()) {
                        return CheckResult
                                .wrong("Your program should not terminate until the user enter " +
                                               "\"/exit\" in the top-level menu");
                    }

                    if (lastLine.contains("/exit")) {
                        return CheckResult
                                .wrong("Your program should remember the user's source and target " +
                                               "base and should not return to the top-level menu " +
                                               "until the user enters \"/back\"");
                    }

                    main.execute("/back");
                }

            }

            main.execute("/exit");
            if (!main.isFinished()) {
                return CheckResult.wrong("Your program should terminate when the user enters " +
                                                 "\"/exit\"");
            }

            return CheckResult.correct();
        }

        CheckResult test7 () {

            TestedProgram main = new TestedProgram();
            int fractionalPartLength;
            String output;
            String lastLine;
            String userResult;
            String actualResult;
            String randomFraction;
            String[] lines;

            main.start();

            for (int sourceBase = 19; sourceBase <= 36; sourceBase += 3) {

                for (int targetBase = 2; targetBase <= 36; targetBase += 3) {

                    if (sourceBase == targetBase) {
                        continue;
                    }

                    output = main.execute(sourceBase + " " + targetBase).toLowerCase();
                    if (!output.contains("base " + sourceBase) || !output
                            .contains("convert to base " + targetBase)) {
                        return CheckResult
                                .wrong("Your program should prompt the user for the number to be " +
                                               "converted with the message \"Enter number in base " +
                                               "{user source base} to convert to base {user target base}" +
                                               " (To go back type /back)\" after accepting the " +
                                               "source and target base");
                    }

                    if (!output.contains("/back")) {
                        return CheckResult
                                .wrong("Your program should provide the user with an option to go " +
                                               "back to the top-level menu with the message \"Enter number in base " +
                                               "{user source base} to convert to base {user target base} " +
                                               "(To go back type /back)\"");
                    }

                    randomFraction = Generator.getRandomSourceNumber(sourceBase, true);
                    actualResult = Converter.convertSourceToTargetBase(randomFraction,
                                                                       sourceBase,
                                                                       targetBase, true);

                    output = main.execute(randomFraction).toLowerCase();

                    lines = output.trim().split("\n");
                    lastLine = lines[lines.length - 1];

                    userResult = getConversionResult(lines);

                    if (!userResult.contains(".")) {
                        return CheckResult.wrong("The conversion result your program outputs does not" +
                                                         " contain the fractional part");
                    }

                    if (userResult.split("\\.").length < 2) {
                        return CheckResult.wrong("A fractional number expected in the output!");
                    }

                    fractionalPartLength = userResult.split("\\.")[1].length();
                    if (fractionalPartLength != 5) {
                        return CheckResult.wrong("The fractional part of your conversion should only " +
                                                         "be 5 digits in length");
                    }

                    if (!actualResult.contains(userResult.substring(0, userResult.indexOf(".") + 2))) {
                        return CheckResult.wrong("The conversion result of your program is wrong");
                    }

                    if (main.isFinished()) {
                        return CheckResult
                                .wrong("Your program should not terminate until the user enter " +
                                               "\"/exit\" in the top-level menu");
                    }

                    if (lastLine.contains("/exit")) {
                        return CheckResult
                                .wrong("Your program should remember the user's source and target " +
                                               "base and should not return to the top-level menu " +
                                               "until the user enters \"/back\"");
                    }

                    main.execute("/back");
                }

            }

            main.execute("/exit");
            if (!main.isFinished()) {
                return CheckResult.wrong("Your program should terminate when the user enters " +
                                                 "\"/exit\"");
            }

            return CheckResult.correct();
        }

        //test fraction using biginteger
        CheckResult test8 () {

            TestedProgram main = new TestedProgram();
            int fractionalPartLength;
            String output;
            String lastLine;
            String userResult;
            String actualResult;
            String randomFraction;
            String[] lines;

            main.start();

            Converter.setIsBigDec(true);

            for (int sourceBase = 2; sourceBase <= 18; sourceBase += 3) {

                for (int targetBase = 2; targetBase <= 36; targetBase += 3) {

                    if (sourceBase == targetBase) {
                        continue;
                    }

                    output = main.execute(sourceBase + " " + targetBase).toLowerCase();
                    if (!output.contains("base " + sourceBase) || !output
                            .contains("convert to base " + targetBase)) {
                        return CheckResult
                                .wrong("Your program should prompt the user for the number to be " +
                                               "converted with the message \"Enter number in base " +
                                               "{user source base} to convert to base {user target base}" +
                                               " (To go back type /back)\" after accepting the " +
                                               "source and target base");
                    }

                    if (!output.contains("/back")) {
                        return CheckResult
                                .wrong("Your program should provide the user with an option to go " +
                                               "back to the top-level menu with the message \"Enter number in base " +
                                               "{user source base} to convert to base {user target base} " +
                                               "(To go back type /back)\"");
                    }

                    randomFraction = Generator.getRandomBigInteger(sourceBase, true);
                    actualResult = Converter.convertSourceToTargetBase(randomFraction,
                                                                       sourceBase,
                                                                       targetBase, true);

                    output = main.execute(randomFraction).toLowerCase();

                    lines = output.trim().split("\n");
                    lastLine = lines[lines.length - 1];

                    userResult = getConversionResult(lines);

                    if (!userResult.contains(".")) {
                        return CheckResult.wrong("The conversion result your program outputs does not" +
                                                         " contain the fractional part");
                    }

                    if (userResult.split("\\.").length < 2) {
                        return CheckResult.wrong("A fractional number expected in the output!");
                    }

                    fractionalPartLength = userResult.split("\\.")[1].length();
                    if (fractionalPartLength != 5) {
                        return CheckResult.wrong("The fractional part of your conversion should only " +
                                                         "be 5 digits in length");
                    }

                    boolean correct = CheckConversion.check(userResult, actualResult);
                    if (!correct) {
                        return CheckResult.wrong("The conversion result of your program is wrong\n" +
                            "Your answer:\n" + userResult + "\n" +
                            "Correct answer:\n" + actualResult);
                    }

                    if (main.isFinished()) {
                        return CheckResult
                                .wrong("Your program should not terminate until the user enter " +
                                               "\"/exit\" in the top-level menu");
                    }

                    if (lastLine.contains("/exit")) {
                        return CheckResult
                                .wrong("Your program should remember the user's source and target " +
                                               "base and should not return to the top-level menu " +
                                               "until the user enters \"/back\"");
                    }

                    main.execute("/back");
                }

            }

            main.execute("/exit");
            if (!main.isFinished()) {
                return CheckResult.wrong("Your program should terminate when the user enters " +
                                                 "\"/exit\"");
            }

            return CheckResult.correct();
        }

        CheckResult test9 () {

            TestedProgram main = new TestedProgram();
            int fractionalPartLength;
            String output;
            String lastLine;
            String userResult;
            String actualResult;
            String randomFraction;
            String[] lines;

            main.start();

            for (int sourceBase = 19; sourceBase <= 36; sourceBase += 3) {

                for (int targetBase = 2; targetBase <= 36; targetBase += 3) {

                    if (sourceBase == targetBase) {
                        continue;
                    }

                    output = main.execute(sourceBase + " " + targetBase).toLowerCase();
                    if (!output.contains("base " + sourceBase) || !output
                            .contains("convert to base " + targetBase)) {
                        return CheckResult
                                .wrong("Your program should prompt the user for the number to be " +
                                               "converted with the message \"Enter number in base " +
                                               "{user source base} to convert to base {user target base}" +
                                               " (To go back type /back)\" after accepting the " +
                                               "source and target base");
                    }

                    if (!output.contains("/back")) {
                        return CheckResult
                                .wrong("Your program should provide the user with an option to go " +
                                               "back to the top-level menu with the message \"Enter number in base " +
                                               "{user source base} to convert to base {user target base} " +
                                               "(To go back type /back)\"");
                    }

                    randomFraction = Generator.getRandomBigInteger(sourceBase, true);
                    actualResult = Converter.convertSourceToTargetBase(randomFraction,
                                                                       sourceBase,
                                                                       targetBase, true);

                    output = main.execute(randomFraction).toLowerCase();

                    lines = output.trim().split("\n");
                    lastLine = lines[lines.length - 1];

                    userResult = getConversionResult(lines);

                    if (!userResult.contains(".")) {
                        return CheckResult.wrong("The conversion result your program outputs does not" +
                                                         " contain the fractional part");
                    }

                    if (userResult.split("\\.").length < 2) {
                        return CheckResult.wrong("A fractional number expected in the output!");
                    }

                    fractionalPartLength = userResult.split("\\.")[1].length();
                    if (fractionalPartLength != 5) {
                        return CheckResult.wrong("The fractional part of your conversion should only " +
                                                         "be 5 digits in length");
                    }

                    boolean correct = CheckConversion.check(userResult, actualResult);
                    if (!correct) {
                        return CheckResult.wrong("The conversion result of your program is wrong\n" +
                            "Your answer:\n" + userResult + "\n" +
                            "Correct answer:\n" + actualResult);
                    }

                    if (main.isFinished()) {
                        return CheckResult
                                .wrong("Your program should not terminate until the user enter " +
                                               "\"/exit\" in the top-level menu");
                    }

                    if (lastLine.contains("/exit")) {
                        return CheckResult
                                .wrong("Your program should remember the user's source and target " +
                                               "base and should not return to the top-level menu " +
                                               "until the user enters \"/back\"");
                    }

                    main.execute("/back");
                }

            }

            main.execute("/exit");
            if (!main.isFinished()) {
                return CheckResult.wrong("Your program should terminate when the user enters " +
                                                 "\"/exit\"");
            }

            return CheckResult.correct();
        }

    }

    class Generator {

        private static String dec;

        static String getRandomSourceNumber (int sourceBase, boolean fraction) {

            if (fraction) {
                double number = new Random().nextDouble() * 1000;
                dec = String.valueOf(number);

                return Converter.fractionToBaseX(dec, sourceBase);
            } else {
                int n = new Random().nextInt(1000);

                return Integer.toString(n, sourceBase);
            }

        }

        static String getDec () {

            return dec;
        }

        static String getRandomBigInteger (int sourceBase, boolean fraction) {

            if (fraction) {

                BigDecimal max = new BigDecimal("500000000000000.0");
                BigDecimal randFromDouble = BigDecimal.valueOf(Math.random());
                BigDecimal actualRandomDec = randFromDouble.multiply(max);

                actualRandomDec = actualRandomDec.setScale(10, RoundingMode.FLOOR);
                dec = actualRandomDec.toString();

                return Converter.fractionToBaseX(dec, sourceBase);
            } else {

                BigInteger upperLimit = new BigInteger("500000000000000");
                BigInteger randomNumber;
                do {
                    randomNumber = new BigInteger(upperLimit.bitLength(), new Random());
                } while (randomNumber.compareTo(upperLimit) >= 0);

                return randomNumber.toString(sourceBase);
            }

        }
    }

    class Converter {

        static boolean isBigDec = false;

        static void setIsBigDec (boolean bigDec) {

            isBigDec = bigDec;
        }

        static String decimalToBaseX (String num, int targetBase) {

            return new BigInteger(num).toString(targetBase);
        }


        static String baseXToDecimal (String number, int sourceBase) {

            BigInteger integer = new BigInteger(number, sourceBase);
            return integer.toString();
        }

        static String convertSourceToTargetBase (String number, int sourceBase, int targetBase,
                                                 boolean fraction) {

            if (fraction) {

                //Step 1- Convert to decimal
                String decimalResult = isBigDec ? Generator.getDec() : baseXToDecimalFraction(number,
                                                                                              number.length(),
                                                                                              sourceBase);

                //Step 2- Convert to target base
                String result = fractionToBaseX(decimalResult, targetBase);
                return result;
            } else {

                //Step 1 - convert source number to decimal
                String decimal = baseXToDecimal(number, sourceBase);

                //Step 2 - convert decimal to target base
                return decimalToBaseX(decimal, targetBase);
            }

        }

        static String fractionToBaseX (String number, int targetBase) {

            String digits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ".toLowerCase();

            StringBuilder output = new StringBuilder();
            BigDecimal doubleOfDecInp = new BigDecimal(number);

            BigInteger beforeDot = new BigDecimal(number).toBigInteger();
            output.append(beforeDot.toString(targetBase));

            BigDecimal bfd = new BigDecimal(beforeDot);

            doubleOfDecInp = doubleOfDecInp.subtract(bfd);

            output.append(".");

            BigInteger subtract = new BigDecimal(String.valueOf(doubleOfDecInp)).toBigInteger();
            BigDecimal bdOfDecInp = new BigDecimal(String.valueOf(doubleOfDecInp));
            BigDecimal bdFractionalPart = bdOfDecInp.subtract(new BigDecimal(subtract));
            double fractionalPart = bdFractionalPart.doubleValue();

            if (!isBigDec) {

                for (int i = 0; i < targetBase; ++i) {

                    fractionalPart = fractionalPart * targetBase;
                    int digit = (int) fractionalPart;
                    char c = digits.charAt(digit);

                    output.append(c);

                    fractionalPart = fractionalPart - digit;

                    if (fractionalPart == 0) {
                        break;
                    }
                }

            } else {

                for (int i = 0; i < number.length(); ++i) {

                    fractionalPart = fractionalPart * targetBase;
                    int digit = (int) fractionalPart;
                    char c = digits.charAt(digit);

                    output.append(c);

                    fractionalPart = fractionalPart - digit;

                    if (fractionalPart == 0) {
                        break;
                    }
                }

            }

            while (output.toString().split("\\.")[1].length() < 5) {
                output.append("0");
            }

            return output.toString();
        }

        static String baseXToDecimalFraction (String number, int len, int sourceBase) {

            String digits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
            number = number.toUpperCase();

            // Fetch the radix point
            int point = number.indexOf('.');

            // Update point if not found
            if (point == -1) {
                point = len;
            }

            BigDecimal integralPart = new BigDecimal(0);
            BigDecimal fractionalPart = new BigDecimal(0);
            BigDecimal multiplier = new BigDecimal(1);

            // Convert integral part of number to decimal
            // equivalent

            BigDecimal sourceBaseBig = new BigDecimal(sourceBase);
            if (number.matches("\\d+.\\d*")) {
                for (int i = point - 1; i >= 0; i--) {
                    char c = number.charAt(i);

                    BigDecimal holder = new BigDecimal(c - '0');
                    integralPart = integralPart.add((holder.multiply(multiplier)));
                    multiplier = multiplier.multiply(sourceBaseBig);
                }

                // Convert fractional part of number to
                // decimal equivalent

                multiplier = sourceBaseBig;
                for (int i = point + 1; i < len; i++) {

                    char c = number.charAt(i);

                    BigDecimal holder = new BigDecimal((c - '0'));
                    fractionalPart = fractionalPart.add((holder).divide(multiplier, 10,
                                                                        RoundingMode.HALF_UP));
                    multiplier = multiplier.multiply(new BigDecimal(String.valueOf(sourceBase)));
                }
            } else {
                for (int i = 0; i < point; i++) {
                    char c = number.charAt(i);
                    int d = digits.indexOf(c);
                    integralPart =
                            (sourceBaseBig.multiply(integralPart)).add(new BigDecimal(d));

                }

                multiplier = sourceBaseBig;
                for (int i = point + 1; i < len; i++) {
                    char c = number.charAt(i);
                    int d = digits.indexOf(c);
                    BigDecimal holder = new BigDecimal(d);
                    fractionalPart = fractionalPart.add((holder).divide(multiplier, 10,
                                                                        RoundingMode.HALF_UP));
                    multiplier = multiplier.multiply(sourceBaseBig);
                }

            }

            String result = (integralPart.add(fractionalPart)).toString();
            return result;
        }

    }

    class CheckConversion {

        static boolean check (String userResult, String actualResult) {

            String digits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ".toLowerCase();
            String[] arrUser = userResult.split("\\.");
            String[] arrActual = actualResult.split("\\.");
            String decimalPartUser = arrUser[1];
            String decimalPartActual = arrActual[1];

            if (!arrUser[0].equals(arrActual[0])) {
                return false;
            }

            char firstDigit = decimalPartUser.charAt(0);
            char firstDigitActual = decimalPartActual.charAt(0);
            int resultIndex = digits.indexOf(firstDigitActual);

            if (firstDigit != firstDigitActual) {
                char maxChar = 'Z';
                char minChar = '0';

                if (firstDigit == maxChar) {
                    return digits.indexOf(firstDigit - 1) == firstDigitActual;
                } else if (firstDigit == minChar) {
                    return digits.indexOf(firstDigit + 1) == firstDigitActual;
                } else {
                    return digits.indexOf(firstDigit) + 1 == resultIndex || digits
                            .indexOf(firstDigit) - 1 == resultIndex;
                }

            } else {
                return true;
            }

        }
    }
  learner_created: false
- name: src/converter/DisplayAndControl.java
  visible: true
  text: |
    package converter;

    import converter.presentation.ConvertFromBase10;
    import converter.presentation.ConvertToBase10;

    import java.math.BigInteger;
    import java.util.Locale;
    import java.util.Scanner;

    public class DisplayAndControl {

        private final Scanner scanner;
        private final ConvertToBase10 convertToBase10;
        private final ConvertFromBase10 convertFromBase10;

        public DisplayAndControl() {
            this.scanner = new Scanner(System.in);
            convertFromBase10 = new ConvertFromBase10(scanner);
            convertToBase10 = new ConvertToBase10(scanner);
        }

        public void display(){
            int i = 1;
            do {
                System.out.println("Do you want to convert /from decimal or /to decimal? (To quit type /exit)");
                String input = scanner.nextLine().toLowerCase(Locale.ROOT);
                switch (input) {
                    case "/from":
                        convertFromBase10.view();
                        break;
                    case "/to":
                        convertToBase10.view();
                        break;
                    case "/exit":
                        i = 0;
                        break;
                    default:
                        break;
                }
            }while(i != 0);
            System.exit(0);
        }

        public void display1(){
            int i = 1;
            do {
                System.out.print("Enter two numbers in format: {source base} {target base} (To quit type /exit) ");
                String input = scanner.nextLine().toLowerCase(Locale.ROOT);
                String[] arr = input.split(" ");
                int sourceBase = 1;
                int targetBase = 1;
                if (arr.length == 2) {
                     sourceBase = Integer.parseInt(arr[0]);
                     targetBase = Integer.parseInt(arr[1]);
                }
                if ((sourceBase >= 2 || sourceBase <= 36) && (targetBase >= 2 && targetBase <= 36)) {
                    input = "go";
                }
                //System.out.println(sourceBase);
                //System.out.println(targetBase);
                switch (input) {
                    case "/exit":
                        i = 0;
                        break;
                    case "go":
                        display2(sourceBase, targetBase);
                    default:
                        break;
                }
            }while(i != 0);
            System.exit(0);
        }

        private void display2(int s, int t){
            int i = 1;
            do {
                System.out.printf("Enter number in base %s to convert to base %s (To go back type /back) ", s, t);
                String input = scanner.nextLine().toLowerCase(Locale.ROOT);
                switch (input) {
                    case "/back":
                        i = 0;
                        break;
                    default:
                        BigInteger r = convertToBase10.result(input, s);
                        String o = convertFromBase10.result(t, r);
                        System.out.println("Conversion result: " + o + "\n");
                        break;
                }
            }while(i != 0);

        }
    }
  learner_created: true
- name: src/converter/presentation/ConvertToBase10.java
  visible: true
  text: |
    package converter.presentation;

    import java.math.BigInteger;
    import java.util.Locale;
    import java.util.Scanner;

    public class ConvertToBase10 {

        private final Scanner scanner;

        public ConvertToBase10(Scanner scanner) {
            this.scanner = scanner;
        }

        public void view() {

            System.out.print("Enter source number: ");
            String line = scanner.next();
            System.out.print("Enter source base: ");
            int line1 = scanner.nextInt();
            //int result = toDecimal(line.toUpperCase(Locale.ROOT), line1);
            BigInteger /*int*/ result = toDecimal(line, line1);
            System.out.printf("Conversion to decimal result: %s\n", result.toString());

        }

        // To return value of a char.
    // For example, 2 is returned
    // for '2'. 10 is returned
    // for 'A', 11 for 'B'
        private int val(char c)
        {
            if (c >= '0' && c <= '9')
                return (int)c - '0';
            else
                //return (int)c - 'A' + 10;
                return (int)c - 'a' + 10;
        }

        // Function to convert a
    // number from given base
    // 'b' to decimal
        private /*int*/ BigInteger toDecimal(String str,
                          int base)
        {
            int len = str.length();
            int power = 1; // Initialize
            BigInteger power1 = BigInteger.ONE;
            // power of base
            int num = 0; // Initialize result
            BigInteger num1 = BigInteger.ZERO;
            int i;

            // Decimal equivalent is
            // str[len-1]*1 + str[len-2] *
            // base + str[len-3]*(base^2) + ...
            for (i = len - 1; i >= 0; i--)
            {
                // A digit in input number
                // must be less than
                // number's base
                /**if (val(str.charAt(i)) >= base)
                {
                    System.out.println("Invalid Number");
                    return -1;
                }*/

                num += val(str.charAt(i)) * power;
                int val = val(str.charAt(i));
                BigInteger val1 = new BigInteger(String.valueOf(val));
                BigInteger val11 = val1.multiply(power1);
                num1 = num1.add(val11);
                power = power * base;
                power1 = power1.multiply(new BigInteger(String.valueOf(base)));
            }

            //return num;
            return num1;
        }

        public /*int*/ BigInteger result(String n, int b){
            return toDecimal(n, b);
        }
    }
  learner_created: true
- name: src/converter/presentation/ConvertFromBase10.java
  visible: true
  text: |
    package converter.presentation;

    import java.math.BigInteger;
    import java.util.Scanner;

    public class ConvertFromBase10 {
        private final Scanner scanner;

        public ConvertFromBase10(Scanner scanner) {
            this.scanner = scanner;
        }

        public void view() {

                System.out.print("Enter number in decimal system: ");
                int line = scanner.nextInt();
                System.out.print("Enter target base: ");
                int line1 = scanner.nextInt();
                //String result = fromDecimal(line1, line);
            String result = fromDecimal(line1, new BigInteger(String.valueOf(line1)));
                System.out.printf("Conversion result: %s\n", result);

        }

        // To return char for a value. For
    // example '2' is returned for 2.
    // 'A' is returned for 10. 'B' for 11
        private char reVal(BigInteger num)
        {
            if (num.intValue() >= 0 && num.intValue() <= 9)
                return (char)(num.intValue() + 48);
            else
                //return (char)(num - 10 + 65);
                return (char)(num.intValue() - 10 + 97);
        }

        // Function to convert a given decimal number
    // to a base 'base' and
        private String fromDecimal(int base1, BigInteger inputNum)
        {
            String s = "";

            // Convert input number is given
            // base by repeatedly dividing it
            // by base and taking remainder
            //while (inputNum > 0)
            //while (inputNum.signum() == 1)
            do{
                BigInteger baseBI = new BigInteger(String.valueOf(base1));
                //s += reVal(inputNum % base1);
                s += reVal(inputNum.remainder(baseBI) );
                //inputNum /= base1;
                inputNum = inputNum.divide(baseBI);
            }while (inputNum.signum() == 1);
            StringBuilder ix = new StringBuilder();

            // append a string into StringBuilder input1
            ix.append(s);

            // Reverse the result
            return new String(ix.reverse());
        }

        public String result(int b, BigInteger n){
            return fromDecimal(b, n);
        }

    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/181/stages/916/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Fri, 04 Mar 2022 12:28:45 UTC
record: -1
