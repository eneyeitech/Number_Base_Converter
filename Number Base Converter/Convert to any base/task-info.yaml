type: edu
files:
- name: src/converter/Main.java
  visible: true
  text: |
    package converter;

    public class Main {

        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/NumeralSystemConverterTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.Arrays;
    import java.math.BigInteger;
    import java.util.List;
    import java.util.Random;

    public class NumeralSystemConverterTest extends StageTest<String> {

        @Override
        public List<TestCase<String>> generate() {

            return Arrays.asList(
                new TestCase<String>().setDynamicTesting(this::test1),
                new TestCase<String>().setDynamicTesting(this::test2),
                new TestCase<String>().setDynamicTesting(this::test3),
                new TestCase<String>().setTimeLimit(60000).setDynamicTesting(this::test4),
                new TestCase<String>().setTimeLimit(60000).setDynamicTesting(this::test5),
                new TestCase<String>().setTimeLimit(60000).setDynamicTesting(this::test6),
                new TestCase<String>().setTimeLimit(60000).setDynamicTesting(this::test7)
            );
        }

        //test exit command
        CheckResult test1() {

            TestedProgram main = new TestedProgram();
            String output = main.start().toLowerCase();

            if (!output.contains("source base") || !output.contains("target base") || !output.contains("/exit")) {
                return CheckResult.wrong("Your program should output the message \"Enter two numbers in format:" +
                    " {source base} {target base} (To quit type /exit)\" when it starts");
            }

            main.execute("/exit");
            if (!main.isFinished()) {
                return CheckResult.wrong("Your program should terminate when the user enters " +
                    "\"/exit\"");
            }

            return CheckResult.correct();
        }

        //test output format
        CheckResult test2() {
            TestedProgram main = new TestedProgram();
            String output;
            String randomDecimal;
            String actualResult;
            String userResult;
            String lastLine;
            String[] lines;

            main.start();
            output = main.execute("10 2").toLowerCase();
            if (!output.contains("base 10") || !output.contains("convert to base 2")) {
                return CheckResult.wrong("Your program should prompt the user for the number to be " +
                    "converted with the message \"Enter number in base " +
                    "{user source base} to convert to base {user target base}" +
                    " (To go back type /back)\" after accepting the " +
                    "source and target base");
            }

            if (!output.contains("/back")) {
                return CheckResult.wrong("Your program should provide the user with an option to go " +
                    "back to the top-level menu with the message \"Enter number in base " +
                    "{user source base} to convert to base {user target base} " +
                    "(To go back type /back)\"");
            }

            randomDecimal = Generator.getRandomSourceNumber(10);
            actualResult = Converter.convertDecimalToBaseX(randomDecimal, 2);

            output = main.execute(randomDecimal).toLowerCase();
            lines = output.trim().split("\n");
            lastLine = lines[lines.length - 1];

            if (!lines[0].contains("result:")) {
                return CheckResult.wrong("Your program should print the conversion result in the " +
                    "format \"Conversion result: CONVERTED_NUMBER\"");
            }

            try {
                userResult = lines[0].substring(output.indexOf(":") + 1).trim();
                if (!userResult.equalsIgnoreCase(actualResult)) {
                    return CheckResult.wrong("The conversion result of your program is wrong");
                }
            } catch (Exception exception) {
                return CheckResult.wrong("Looks like your output has wrong format. Look at examples!");
            }

            if (main.isFinished()) {
                return CheckResult.wrong("Your program should not terminate until the user enter " +
                    "\"/exit\" in the top-level menu");
            }

            if (lastLine.contains("/exit")) {
                return CheckResult.wrong("Your program should remember the user's source and target " +
                    "base and should not return to the top-level menu " +
                    "until the user enters \"/back\"");
            }

            if (!lastLine.contains("base 10") || !lastLine.contains("convert to base 2")) {
                return CheckResult.wrong("After each conversion, your program should prompt the user" +
                    " for a number to be " +
                    "converted with the message \"Enter number in base " +
                    "{user source base} to convert to base {user target base}" +
                    " (To go back type /back)\" until the user enters " +
                    "\"/back\"");
            }


            return CheckResult.correct();
        }

        //test back command
        CheckResult test3() {
            TestedProgram main = new TestedProgram();
            String output;
            String lastLine;
            String[] lines;


            main.start();
            main.execute("10 2");
            main.execute(Generator.getRandomSourceNumber(10));

            output = main.execute("/back").toLowerCase();
            if (!output.contains("/exit")) {
                return CheckResult.wrong("Your program should take the user back to the top-level " +
                    "menu when they enter \"/back\"");
            }

            main.execute("10 8");
            output = main.execute(Generator.getRandomSourceNumber(10)).toLowerCase().trim();

            lines = output.trim().split("\n");
            lastLine = lines[lines.length - 1];
            if (!lastLine.contains("base 10") || !lastLine.contains("convert to base 8")) {
                return CheckResult.wrong("After each conversion, your program should prompt the user" +
                    " for a number to be " +
                    "converted with the message \"Enter number in base " +
                    "{user source base} to convert to base {user target base}" +
                    " (To go back type /back)\" until the user enters " +
                    "\"/back\"");
            }

            main.execute("/back");
            main.execute("/exit");
            if (!main.isFinished()) {
                return CheckResult.wrong("Your program should terminate when the user enters " +
                    "\"/exit\"");
            }

            return CheckResult.correct();
        }

        //convert every possible base to every possible base ;)
        CheckResult test4() {
            TestedProgram main = new TestedProgram();
            String output;
            String lastLine;
            String userResult;
            String actualResult;
            String randomSourceNumber;
            String[] lines;

            main.start();

            for (int sourceBase = 2; sourceBase <= 18; sourceBase += 3) {

                for (int targetBase = 2; targetBase <= 36; targetBase += 3) {

                    if (sourceBase == targetBase) {
                        continue;
                    }

                    output = main.execute(sourceBase + " " + targetBase).toLowerCase();
                    if (!output.contains("base " + sourceBase) || !output.contains("convert to base " + targetBase)) {
                        return CheckResult.wrong("Your program should prompt the user for the number to be " +
                            "converted with the message \"Enter number in base " +
                            "{user source base} to convert to base {user target base}" +
                            " (To go back type /back)\" after accepting the " +
                            "source and target base");
                    }

                    if (!output.contains("/back")) {
                        return CheckResult.wrong("Your program should provide the user with an option to go " +
                            "back to the top-level menu with the message \"Enter number in base " +
                            "{user source base} to convert to base {user target base} " +
                            "(To go back type /back)\"");
                    }

                    randomSourceNumber = Generator.getRandomSourceNumber(sourceBase);
                    actualResult = Converter
                        .convertSourceToTargetBase(randomSourceNumber, sourceBase, targetBase);

                    output = main.execute(randomSourceNumber).toLowerCase();

                    lines = output.trim().split("\n");
                    lastLine = lines[lines.length - 1];

                    try {
                        userResult = lines[0].substring(output.indexOf(":") + 1).trim();
                        if (!userResult.equalsIgnoreCase(actualResult)) {
                            return CheckResult.wrong("The conversion result of your program is wrong");
                        }
                    } catch (Exception exception) {
                        return CheckResult.wrong("Looks like your output has wrong format. Look at examples!");
                    }

                    if (main.isFinished()) {
                        return CheckResult.wrong("Your program should not terminate until the user enter " +
                            "\"/exit\" in the top-level menu");
                    }

                    if (lastLine.contains("/exit")) {
                        return CheckResult.wrong("Your program should remember the user's source and target " +
                            "base and should not return to the top-level menu " +
                            "until the user enters \"/back\"");
                    }

                    main.execute("/back");
                }

            }

            main.execute("/exit");
            if (!main.isFinished()) {
                return CheckResult.wrong("Your program should terminate when the user enters " +
                    "\"/exit\"");
            }

            return CheckResult.correct();
        }

        CheckResult test5() {
            TestedProgram main = new TestedProgram();
            String output;
            String lastLine;
            String userResult;
            String actualResult;
            String randomSourceNumber;
            String[] lines;

            main.start();

            for (int sourceBase = 19; sourceBase <= 36; sourceBase += 3) {

                for (int targetBase = 2; targetBase <= 36; targetBase += 3) {

                    if (sourceBase == targetBase) {
                        continue;
                    }

                    output = main.execute(sourceBase + " " + targetBase).toLowerCase();
                    if (!output.contains("base " + sourceBase) || !output.contains("convert to base " + targetBase)) {
                        return CheckResult.wrong("Your program should prompt the user for the number to be " +
                            "converted with the message \"Enter number in base " +
                            "{user source base} to convert to base {user target base}" +
                            " (To go back type /back)\" after accepting the " +
                            "source and target base");
                    }

                    if (!output.contains("/back")) {
                        return CheckResult.wrong("Your program should provide the user with an option to go " +
                            "back to the top-level menu with the message \"Enter number in base " +
                            "{user source base} to convert to base {user target base} " +
                            "(To go back type /back)\"");
                    }

                    randomSourceNumber = Generator.getRandomSourceNumber(sourceBase);
                    actualResult = Converter
                        .convertSourceToTargetBase(randomSourceNumber, sourceBase, targetBase);

                    output = main.execute(randomSourceNumber).toLowerCase();

                    lines = output.trim().split("\n");
                    lastLine = lines[lines.length - 1];

                    try {
                        userResult = lines[0].substring(output.indexOf(":") + 1).trim();
                        if (!userResult.equalsIgnoreCase(actualResult)) {
                            return CheckResult.wrong("The conversion result of your program is wrong");
                        }
                    } catch (Exception exception) {
                        return CheckResult.wrong("Looks like your output has wrong format. Look at examples!");
                    }

                    if (main.isFinished()) {
                        return CheckResult.wrong("Your program should not terminate until the user enter " +
                            "\"/exit\" in the top-level menu");
                    }

                    if (lastLine.contains("/exit")) {
                        return CheckResult.wrong("Your program should remember the user's source and target " +
                            "base and should not return to the top-level menu " +
                            "until the user enters \"/back\"");
                    }

                    main.execute("/back");
                }

            }

            main.execute("/exit");
            if (!main.isFinished()) {
                return CheckResult.wrong("Your program should terminate when the user enters " +
                    "\"/exit\"");
            }

            return CheckResult.correct();
        }

        //using BigInteger
        CheckResult test6() {
            TestedProgram main = new TestedProgram();
            String output;
            String lastLine;
            String userResult;
            String actualResult;
            String randomBigInteger;
            String[] lines;

            main.start();

            for (int sourceBase = 2; sourceBase <= 18; sourceBase += 3) {

                for (int targetBase = 2; targetBase <= 36; targetBase += 3) {

                    if (sourceBase == targetBase) {
                        continue;
                    }

                    output = main.execute(sourceBase + " " + targetBase).toLowerCase();
                    if (!output.contains("base " + sourceBase) || !output.contains("convert to base " + targetBase)) {
                        return CheckResult.wrong("Your program should prompt the user for the number to be " +
                            "converted with the message \"Enter number in base " +
                            "{user source base} to convert to base {user target base}" +
                            " (To go back type /back)\" after accepting the " +
                            "source and target base");
                    }

                    if (!output.contains("/back")) {
                        return CheckResult.wrong("Your program should provide the user with an option to go " +
                            "back to the top-level menu with the message \"Enter number in base " +
                            "{user source base} to convert to base {user target base} " +
                            "(To go back type /back)\"");
                    }

                    randomBigInteger = Generator.getRandomBigInteger(sourceBase);
                    actualResult = Converter
                        .convertSourceToTargetBase(randomBigInteger, sourceBase, targetBase);

                    output = main.execute(randomBigInteger).toLowerCase();

                    lines = output.trim().split("\n");
                    lastLine = lines[lines.length - 1];

                    try {
                        userResult = lines[0].substring(output.indexOf(":") + 1).trim();
                        if (!userResult.equalsIgnoreCase(actualResult)) {
                            return CheckResult.wrong("The conversion result of your program is wrong");
                        }
                    } catch (Exception exception) {
                        return CheckResult.wrong("Looks like your output has wrong format. Look at examples!");
                    }

                    if (main.isFinished()) {
                        return CheckResult.wrong("Your program should not terminate until the user enter " +
                            "\"/exit\" in the top-level menu");
                    }

                    if (lastLine.contains("/exit")) {
                        return CheckResult.wrong("Your program should remember the user's source and target " +
                            "base and should not return to the top-level menu " +
                            "until the user enters \"/back\"");
                    }

                    main.execute("/back");
                }

            }

            main.execute("/exit");
            if (!main.isFinished()) {
                return CheckResult.wrong("Your program should terminate when the user enters " +
                    "\"/exit\"");
            }

            return CheckResult.correct();
        }

        CheckResult test7() {
            TestedProgram main = new TestedProgram();
            String output;
            String lastLine;
            String userResult;
            String actualResult;
            String randomBigInteger;
            String[] lines;

            main.start();

            for (int sourceBase = 19; sourceBase <= 36; sourceBase += 3) {

                for (int targetBase = 2; targetBase <= 36; targetBase += 3) {

                    if (sourceBase == targetBase) {
                        continue;
                    }

                    output = main.execute(sourceBase + " " + targetBase).toLowerCase();
                    if (!output.contains("base " + sourceBase) || !output.contains("convert to base " + targetBase)) {
                        return CheckResult.wrong("Your program should prompt the user for the number to be " +
                            "converted with the message \"Enter number in base " +
                            "{user source base} to convert to base {user target base}" +
                            " (To go back type /back)\" after accepting the " +
                            "source and target base");
                    }

                    if (!output.contains("/back")) {
                        return CheckResult.wrong("Your program should provide the user with an option to go " +
                            "back to the top-level menu with the message \"Enter number in base " +
                            "{user source base} to convert to base {user target base} " +
                            "(To go back type /back)\"");
                    }

                    randomBigInteger = Generator.getRandomBigInteger(sourceBase);
                    actualResult = Converter
                        .convertSourceToTargetBase(randomBigInteger, sourceBase, targetBase);

                    output = main.execute(randomBigInteger).toLowerCase();

                    lines = output.trim().split("\n");
                    lastLine = lines[lines.length - 1];

                    try {
                        userResult = lines[0].substring(output.indexOf(":") + 1).trim();
                        if (!userResult.equalsIgnoreCase(actualResult)) {
                            return CheckResult.wrong("The conversion result of your program is wrong");
                        }
                    } catch (Exception exception) {
                        return CheckResult.wrong("Looks like your output has wrong format. Look at examples!");
                    }

                    if (main.isFinished()) {
                        return CheckResult.wrong("Your program should not terminate until the user enter " +
                            "\"/exit\" in the top-level menu");
                    }

                    if (lastLine.contains("/exit")) {
                        return CheckResult.wrong("Your program should remember the user's source and target " +
                            "base and should not return to the top-level menu " +
                            "until the user enters \"/back\"");
                    }

                    main.execute("/back");
                }

            }

            main.execute("/exit");
            if (!main.isFinished()) {
                return CheckResult.wrong("Your program should terminate when the user enters " +
                    "\"/exit\"");
            }

            return CheckResult.correct();
        }

    }

    class Generator {
        static String getRandomBigInteger(int sourceBase) {
            BigInteger upperLimit = new BigInteger("500000000000000");
            BigInteger randomNumber;
            do {
                randomNumber = new BigInteger(upperLimit.bitLength(), new Random());
            } while (randomNumber.compareTo(upperLimit) >= 0);

            return randomNumber.toString(sourceBase);
        }

        static String getRandomSourceNumber(int sourceBase) {

            int n = new Random().nextInt(1000);

            return Integer.toString(n, sourceBase);
        }
    }

    class Converter {
        static String convertDecimalToBaseX(String num, int targetBase) {
            return new BigInteger(String.valueOf(num)).toString(targetBase);
        }

        static String convertBaseXToDecimal(String number, int sourceBase) {
            BigInteger integer = new BigInteger(number, sourceBase);
            return integer.toString();
        }

        static String convertSourceToTargetBase(String number, int sourceBase, int targetBase) {
            //Step 1 - convert source number to decimal
            String decimal = convertBaseXToDecimal(number, sourceBase);

            //Step 2 - convert decimal to target base
            return convertDecimalToBaseX(decimal, targetBase);
        }
    }
  learner_created: false
- name: src/converter/DisplayAndControl.java
  visible: true
  text: |
    package converter;

    import converter.presentation.ConvertFromBase10;
    import converter.presentation.ConvertToBase10;

    import java.util.Locale;
    import java.util.Scanner;

    public class DisplayAndControl {

        private final Scanner scanner;
        private final ConvertToBase10 convertToBase10;
        private final ConvertFromBase10 convertFromBase10;

        public DisplayAndControl() {
            this.scanner = new Scanner(System.in);
            convertFromBase10 = new ConvertFromBase10(scanner);
            convertToBase10 = new ConvertToBase10(scanner);
        }

        public void display(){
            int i = 1;
            do {
                System.out.println("Do you want to convert /from decimal or /to decimal? (To quit type /exit)");
                String input = scanner.nextLine().toLowerCase(Locale.ROOT);
                switch (input) {
                    case "/from":
                        convertFromBase10.view();
                        break;
                    case "/to":
                        convertToBase10.view();
                        break;
                    case "/exit":
                        i = 0;
                        break;
                    default:
                        break;
                }
            }while(i != 0);
            System.exit(0);
        }
    }
  learner_created: true
- name: src/converter/presentation/ConvertToBase10.java
  visible: true
  text: |
    package converter.presentation;

    import java.math.BigInteger;
    import java.util.Locale;
    import java.util.Scanner;

    public class ConvertToBase10 {

        private final Scanner scanner;

        public ConvertToBase10(Scanner scanner) {
            this.scanner = scanner;
        }

        public void view() {

            System.out.print("Enter source number: ");
            String line = scanner.next();
            System.out.print("Enter source base: ");
            int line1 = scanner.nextInt();
            int result = toDecimal(line.toUpperCase(Locale.ROOT), line1);
            System.out.printf("Conversion to decimal result: %s\n", result);

        }

        // To return value of a char.
    // For example, 2 is returned
    // for '2'. 10 is returned
    // for 'A', 11 for 'B'
        private int val(char c)
        {
            if (c >= '0' && c <= '9')
                return (int)c - '0';
            else
                return (int)c - 'A' + 10;
        }

        // Function to convert a
    // number from given base
    // 'b' to decimal
        private int toDecimal(String str,
                          int base)
        {
            int len = str.length();
            int power = 1; // Initialize
            // power of base
            int num = 0; // Initialize result
            int i;

            // Decimal equivalent is
            // str[len-1]*1 + str[len-2] *
            // base + str[len-3]*(base^2) + ...
            for (i = len - 1; i >= 0; i--)
            {
                // A digit in input number
                // must be less than
                // number's base
                if (val(str.charAt(i)) >= base)
                {
                    System.out.println("Invalid Number");
                    return -1;
                }

                num += val(str.charAt(i)) * power;
                power = power * base;
            }

            return num;
        }
    }
  learner_created: true
- name: src/converter/presentation/ConvertFromBase10.java
  visible: true
  text: |
    package converter.presentation;

    import java.util.Scanner;

    public class ConvertFromBase10 {
        private final Scanner scanner;

        public ConvertFromBase10(Scanner scanner) {
            this.scanner = scanner;
        }

        public void view() {

                System.out.print("Enter number in decimal system: ");
                int line = scanner.nextInt();
                System.out.print("Enter target base: ");
                int line1 = scanner.nextInt();
                String result = fromDecimal(line1, line);
                System.out.printf("Conversion result: %s\n", result);

        }

        // To return char for a value. For
    // example '2' is returned for 2.
    // 'A' is returned for 10. 'B' for 11
        private char reVal(int num)
        {
            if (num >= 0 && num <= 9)
                return (char)(num + 48);
            else
                return (char)(num - 10 + 65);
        }

        // Function to convert a given decimal number
    // to a base 'base' and
        private String fromDecimal(int base1, int inputNum)
        {
            String s = "";

            // Convert input number is given
            // base by repeatedly dividing it
            // by base and taking remainder
            while (inputNum > 0)
            {
                s += reVal(inputNum % base1);
                inputNum /= base1;
            }
            StringBuilder ix = new StringBuilder();

            // append a string into StringBuilder input1
            ix.append(s);

            // Reverse the result
            return new String(ix.reverse());
        }

    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/181/stages/915/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Thu, 03 Mar 2022 23:19:22 UTC
record: 3
